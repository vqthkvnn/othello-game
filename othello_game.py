#!/usr/bin/env python3
"""
üéÆ OTHELLO GPT GAME - S·ª≠ d·ª•ng GPT AI t·ª´ othello_world project
"""

import os
import torch
import numpy as np
import time
from data import get_othello
from data.othello import OthelloBoardState
from mingpt.model import GPT, GPTConfig
from mingpt.dataset import CharDataset
from mingpt.utils import sample


class OthelloGPTAI:
    def __init__(self, checkpoint_path=None):
        """
        Kh·ªüi t·∫°o Othello GPT AI s·ª≠ d·ª•ng model t·ª´ othello_world

        Args:
            checkpoint_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn checkpoint GPT model
        """
        print("ü§ñ ƒêang kh·ªüi t·∫°o Othello GPT AI...")

        # Load data ƒë·ªÉ t·∫°o dataset v√† vocab
        print("üìä Loading championship data...")
        othello = get_othello(data_root="data/othello_championship")
        self.train_dataset = CharDataset(othello)

        print(f"‚úÖ Dataset: {len(self.train_dataset)} sequences")
        print(f"‚úÖ Vocab size: {self.train_dataset.vocab_size}")
        print(f"‚úÖ Block size: {self.train_dataset.block_size}")

        # T·∫°o model config
        mconf = GPTConfig(
            self.train_dataset.vocab_size,
            self.train_dataset.block_size,
            n_layer=8,
            n_head=8,
            n_embd=512
        )

        self.model = GPT(mconf)
        self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        # Load checkpoint
        if checkpoint_path and os.path.exists(checkpoint_path):
            print(f"üìÇ Loading GPT checkpoint: {checkpoint_path}")
            self.model.load_state_dict(torch.load(checkpoint_path, map_location=self.device))
            print("‚úÖ GPT model loaded successfully")
        else:
            # Th·ª≠ t√¨m checkpoint c√≥ s·∫µn
            available_checkpoints = [
                "./ckpts/gpt_championship.ckpt",
                "./ckpts/gpt_synthetic.ckpt",
                "./ckpts/gpt_quick.ckpt"
            ]

            loaded = False
            for ckpt in available_checkpoints:
                if os.path.exists(ckpt):
                    print(f"üìÇ Found checkpoint: {ckpt}")
                    self.model.load_state_dict(torch.load(ckpt, map_location=self.device))
                    print("‚úÖ GPT model loaded successfully")
                    loaded = True
                    break

            if not loaded:
                print("‚ö†Ô∏è  No checkpoint found, using random weights")
                print("üí° Model s·∫Ω ch∆°i random, ƒë·ªÉ c√≥ AI t·ªët h∆°n c·∫ßn train model")

        self.model.to(self.device)
        self.model.eval()

        param_count = sum(p.numel() for p in self.model.parameters())
        print(f"üß† GPT Model: {param_count:,} parameters")
        print(f"üíª Device: {self.device}")
        print("‚úÖ Othello GPT AI ready!")

    def predict_next_move(self, game_sequence, temperature=0.8, top_k=10):
        """
        S·ª≠ d·ª•ng GPT model ƒë·ªÉ predict next move

        Args:
            game_sequence: List c√°c moves ƒë√£ ch∆°i (integers)
            temperature: Temperature cho sampling
            top_k: Top-k sampling

        Returns:
            predicted_move: Move ƒë∆∞·ª£c predict (integer)
        """
        if len(game_sequence) == 0:
            # First move th∆∞·ªùng ·ªü gi·ªØa
            return 26  # D4

        # Convert sequence to tokens
        tokens = []
        for move in game_sequence:
            if move in self.train_dataset.stoi:
                tokens.append(self.train_dataset.stoi[move])
            else:
                # Fallback cho moves kh√¥ng c√≥ trong vocab
                tokens.append(0)

        # Truncate n·∫øu qu√° d√†i
        max_len = self.train_dataset.block_size - 1
        if len(tokens) > max_len:
            tokens = tokens[-max_len:]

        # Convert to tensor
        x = torch.tensor(tokens, dtype=torch.long).unsqueeze(0).to(self.device)

        # Generate prediction
        with torch.no_grad():
            # Sample next token
            y = sample(self.model, x, 1, temperature=temperature, sample=True, top_k=top_k)[0]
            predicted_token = y[-1].item()

            # Convert token back to move
            predicted_move = self.train_dataset.itos.get(predicted_token, -1)

            return predicted_move

    def choose_best_move(self, board_state, game_sequence):
        """
        Ch·ªçn n∆∞·ªõc ƒëi t·ªët nh·∫•t t·ª´ GPT predictions

        Args:
            board_state: OthelloBoardState object
            game_sequence: List c√°c moves ƒë√£ ch∆°i

        Returns:
            best_move: N∆∞·ªõc ƒëi ƒë∆∞·ª£c ch·ªçn (integer position)
        """
        valid_moves = board_state.get_valid_moves()

        if not valid_moves:
            return None

        if len(valid_moves) == 1:
            return valid_moves[0]

        # Th·ª≠ predict v·ªõi nhi·ªÅu temperature kh√°c nhau
        move_scores = {}

        for temp in [0.5, 0.8, 1.0]:
            for _ in range(5):  # Sample 5 l·∫ßn cho m·ªói temperature
                predicted_move = self.predict_next_move(game_sequence, temperature=temp)

                if predicted_move in valid_moves:
                    if predicted_move not in move_scores:
                        move_scores[predicted_move] = 0
                    move_scores[predicted_move] += 1

        # Ch·ªçn move c√≥ score cao nh·∫•t
        if move_scores:
            best_move = max(move_scores.items(), key=lambda x: x[1])[0]
            return best_move

        # Fallback: ch·ªçn random t·ª´ valid moves
        return np.random.choice(valid_moves)


def print_board(board_state):
    """In b√†n c·ªù Othello"""
    os.system('cls' if os.name == 'nt' else 'clear')

    print("üéÆ OTHELLO GPT GAME")
    print("ü§ñ Powered by GPT AI from othello_world")
    print("=" * 50)
    print("   A B C D E F G H")

    for i in range(8):
        row = f"{i + 1}  "
        for j in range(8):
            if board_state.state[i][j] == 1:
                row += "‚óè "  # Black
            elif board_state.state[i][j] == -1:
                row += "‚óã "  # White
            else:
                row += ". "  # Empty
        print(row)

    # Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
    black_count = np.sum(board_state.state == 1)
    white_count = np.sum(board_state.state == -1)

    print(f"\n‚óè Black: {black_count}  ‚óã White: {white_count}")
    print(f"Next player: {'‚óè Black' if board_state.next_hand_color == 1 else '‚óã White'}")
    print("=" * 50)


def pos_to_str(pos):
    """Convert position to string (e.g., 26 -> 'D4')"""
    if pos < 0 or pos >= 64:
        return "Invalid"
    row = pos // 8
    col = pos % 8
    return f"{chr(ord('A') + col)}{row + 1}"


def str_to_pos(move_str):
    """Convert string to position (e.g., 'D4' -> 26)"""
    if len(move_str) != 2:
        return -1
    try:
        col = ord(move_str[0].upper()) - ord('A')
        row = int(move_str[1]) - 1
        if 0 <= row < 8 and 0 <= col < 8:
            return row * 8 + col
    except:
        pass
    return -1


def play_game():
    """Main game function"""
    print("üéÆ OTHELLO GPT GAME")
    print("=" * 50)
    print("ü§ñ S·ª≠ d·ª•ng GPT AI t·ª´ othello_world project")
    print("üß† Model ƒë∆∞·ª£c train tr√™n championship data")
    print("=" * 50)
    print("B·∫°n l√† ‚óè (Black), GPT AI l√† ‚óã (White)")
    print("Nh·∫≠p n∆∞·ªõc ƒëi theo format: D4, E3, etc.")
    print("Nh·∫≠p 'quit' ƒë·ªÉ tho√°t, 'help' ƒë·ªÉ xem n∆∞·ªõc ƒëi h·ª£p l·ªá")
    print("=" * 50)

    # Kh·ªüi t·∫°o GPT AI
    try:
        ai = OthelloGPTAI()
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o GPT AI: {e}")
        print("üí° ƒê·∫£m b·∫£o ƒë√£ setup environment v√† c√≥ data")
        return

    # Kh·ªüi t·∫°o game
    board = OthelloBoardState()
    game_sequence = []

    print("\nüöÄ Game b·∫Øt ƒë·∫ßu!")
    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    while True:
        print_board(board)

        # Ki·ªÉm tra game over
        valid_moves = board.get_valid_moves()
        if not valid_moves:
            # Th·ª≠ ƒë·ªïi l∆∞·ª£t
            board.next_hand_color *= -1
            valid_moves_other = board.get_valid_moves()
            board.next_hand_color *= -1

            if not valid_moves_other:
                # Game over
                black_count = np.sum(board.state == 1)
                white_count = np.sum(board.state == -1)

                print("\nüèÅ GAME OVER!")
                if black_count > white_count:
                    print("üéâ ‚óè Black (B·∫°n) th·∫Øng!")
                elif white_count > black_count:
                    print("ü§ñ ‚óã White (GPT AI) th·∫Øng!")
                else:
                    print("ü§ù H√≤a!")

                print(f"Final score: ‚óè {black_count} - {white_count} ‚óã")
                break

        # L∆∞·ª£t ng∆∞·ªùi ch∆°i (Black)
        if board.next_hand_color == 1:
            if not valid_moves:
                print("‚è≠Ô∏è  B·∫°n kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá, b·ªè l∆∞·ª£t")
                board.next_hand_color *= -1
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue

            print(f"N∆∞·ªõc ƒëi h·ª£p l·ªá: {[pos_to_str(pos) for pos in valid_moves]}")

            while True:
                move_input = input("Nh·∫≠p n∆∞·ªõc ƒëi c·ªßa b·∫°n: ").strip()

                if move_input.lower() == 'quit':
                    print("üëã T·∫°m bi·ªát!")
                    return
                elif move_input.lower() == 'help':
                    print(f"N∆∞·ªõc ƒëi h·ª£p l·ªá: {[pos_to_str(pos) for pos in valid_moves]}")
                    continue

                move_pos = str_to_pos(move_input)
                if move_pos in valid_moves:
                    board.umpire(move_pos)
                    game_sequence.append(move_pos)
                    print(f"‚úÖ B·∫°n ƒë√£ ch∆°i {move_input.upper()}")
                    break
                else:
                    print("‚ùå N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá!")

        # L∆∞·ª£t GPT AI (White)
        else:
            if not valid_moves:
                print("‚è≠Ô∏è  GPT AI kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá, b·ªè l∆∞·ª£t")
                board.next_hand_color *= -1
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue

            print("ü§ñ GPT AI ƒëang suy nghƒ©...")
            time.sleep(1.5)  # T·∫°o c·∫£m gi√°c AI ƒëang "suy nghƒ©"

            try:
                ai_move = ai.choose_best_move(board, game_sequence)
                if ai_move is not None and ai_move in valid_moves:
                    board.umpire(ai_move)
                    game_sequence.append(ai_move)
                    print(f"ü§ñ GPT AI ch·ªçn: {pos_to_str(ai_move)}")
                else:
                    # Fallback n·∫øu GPT prediction kh√¥ng h·ª£p l·ªá
                    fallback_move = np.random.choice(valid_moves)
                    board.umpire(fallback_move)
                    game_sequence.append(fallback_move)
                    print(f"ü§ñ GPT AI ch·ªçn: {pos_to_str(fallback_move)} (fallback)")
            except Exception as e:
                print(f"‚ö†Ô∏è  GPT AI error: {e}")
                # Fallback to random
                fallback_move = np.random.choice(valid_moves)
                board.umpire(fallback_move)
                game_sequence.append(fallback_move)
                print(f"ü§ñ AI ch·ªçn: {pos_to_str(fallback_move)} (random fallback)")

            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

    input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")


if __name__ == '__main__':
    try:
        play_game()
    except KeyboardInterrupt:
        print("\nüëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
