#!/usr/bin/env python3
"""
üéÆ OTHELLO (Reversi) 8x8 - Game ƒë√°nh c·ªù l·∫≠t
Lu·∫≠t ch∆°i: L·∫≠t c√°c qu√¢n c·ªù ƒë·ªëi ph∆∞∆°ng b·∫±ng c√°ch bao v√¢y
"""

import os
import random
import time

class OthelloBoard:
    def __init__(self):
        """Kh·ªüi t·∫°o b√†n c·ªù 8x8"""
        self.board = [[0 for _ in range(8)] for _ in range(8)]
        self.current_player = 1  # 1 = Black (‚óè), -1 = White (‚óã)
        
        # Setup v·ªã tr√≠ ban ƒë·∫ßu
        self.board[3][3] = -1  # White
        self.board[3][4] = 1   # Black
        self.board[4][3] = 1   # Black
        self.board[4][4] = -1  # White
        
        self.directions = [(-1,-1), (-1,0), (-1,1), (0,-1), (0,1), (1,-1), (1,0), (1,1)]
    
    def print_board(self):
        """In b√†n c·ªù ra m√†n h√¨nh"""
        os.system('cls' if os.name == 'nt' else 'clear')
        
        print("üéÆ OTHELLO (C·ªù L·∫≠t) 8x8")
        print("=" * 40)
        print("   A B C D E F G H")
        
        for i in range(8):
            row = f"{i+1}  "
            for j in range(8):
                if self.board[i][j] == 1:
                    row += "‚óè "  # Black
                elif self.board[i][j] == -1:
                    row += "‚óã "  # White
                else:
                    row += ". "  # Empty
            print(row)
        
        # Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë
        black_count = sum(row.count(1) for row in self.board)
        white_count = sum(row.count(-1) for row in self.board)
        
        print(f"\n‚óè Black: {black_count}  ‚óã White: {white_count}")
        print(f"L∆∞·ª£t: {'‚óè Black' if self.current_player == 1 else '‚óã White'}")
        print("=" * 40)
    
    def is_valid_position(self, row, col):
        """Ki·ªÉm tra v·ªã tr√≠ c√≥ h·ª£p l·ªá kh√¥ng"""
        return 0 <= row < 8 and 0 <= col < 8
    
    def can_flip(self, row, col, direction):
        """Ki·ªÉm tra c√≥ th·ªÉ l·∫≠t qu√¢n c·ªù theo h∆∞·ªõng n√†y kh√¥ng"""
        dr, dc = direction
        r, c = row + dr, col + dc
        found_opponent = False
        
        while self.is_valid_position(r, c):
            if self.board[r][c] == 0:  # √î tr·ªëng
                return False
            elif self.board[r][c] == -self.current_player:  # Qu√¢n ƒë·ªëi ph∆∞∆°ng
                found_opponent = True
                r, c = r + dr, c + dc
            elif self.board[r][c] == self.current_player:  # Qu√¢n c·ªßa m√¨nh
                return found_opponent
            else:
                return False
        
        return False
    
    def is_valid_move(self, row, col):
        """Ki·ªÉm tra n∆∞·ªõc ƒëi c√≥ h·ª£p l·ªá kh√¥ng"""
        if not self.is_valid_position(row, col) or self.board[row][col] != 0:
            return False
        
        # Ki·ªÉm tra c√≥ th·ªÉ l·∫≠t qu√¢n n√†o kh√¥ng
        for direction in self.directions:
            if self.can_flip(row, col, direction):
                return True
        
        return False
    
    def get_valid_moves(self):
        """L·∫•y t·∫•t c·∫£ n∆∞·ªõc ƒëi h·ª£p l·ªá"""
        valid_moves = []
        for i in range(8):
            for j in range(8):
                if self.is_valid_move(i, j):
                    valid_moves.append((i, j))
        return valid_moves
    
    def flip_pieces(self, row, col, direction):
        """L·∫≠t c√°c qu√¢n c·ªù theo h∆∞·ªõng"""
        dr, dc = direction
        r, c = row + dr, col + dc
        pieces_to_flip = []
        
        while self.is_valid_position(r, c):
            if self.board[r][c] == 0:
                break
            elif self.board[r][c] == -self.current_player:
                pieces_to_flip.append((r, c))
                r, c = r + dr, c + dc
            elif self.board[r][c] == self.current_player:
                # L·∫≠t t·∫•t c·∫£ qu√¢n c·ªù trong danh s√°ch
                for flip_r, flip_c in pieces_to_flip:
                    self.board[flip_r][flip_c] = self.current_player
                return True
            else:
                break
        
        return False
    
    def make_move(self, row, col):
        """Th·ª±c hi·ªán n∆∞·ªõc ƒëi"""
        if not self.is_valid_move(row, col):
            return False
        
        # ƒê·∫∑t qu√¢n c·ªù
        self.board[row][col] = self.current_player
        
        # L·∫≠t c√°c qu√¢n c·ªù theo t·∫•t c·∫£ h∆∞·ªõng
        for direction in self.directions:
            if self.can_flip(row, col, direction):
                self.flip_pieces(row, col, direction)
        
        # ƒê·ªïi l∆∞·ª£t
        self.current_player = -self.current_player
        return True
    
    def is_game_over(self):
        """Ki·ªÉm tra game ƒë√£ k·∫øt th√∫c ch∆∞a"""
        # Ki·ªÉm tra c·∫£ hai ng∆∞·ªùi ch∆°i c√≥ n∆∞·ªõc ƒëi kh√¥ng
        player1_moves = len(self.get_valid_moves())
        
        self.current_player = -self.current_player
        player2_moves = len(self.get_valid_moves())
        self.current_player = -self.current_player
        
        return player1_moves == 0 and player2_moves == 0
    
    def get_winner(self):
        """X√°c ƒë·ªãnh ng∆∞·ªùi th·∫Øng"""
        black_count = sum(row.count(1) for row in self.board)
        white_count = sum(row.count(-1) for row in self.board)
        
        if black_count > white_count:
            return 1  # Black wins
        elif white_count > black_count:
            return -1  # White wins
        else:
            return 0  # Tie

class SimpleAI:
    def __init__(self, difficulty="medium"):
        """AI ƒë∆°n gi·∫£n v·ªõi c√°c m·ª©c ƒë·ªô kh√≥"""
        self.difficulty = difficulty
    
    def evaluate_move(self, board, row, col):
        """ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng n∆∞·ªõc ƒëi"""
        score = 0
        
        # ∆Øu ti√™n g√≥c (r·∫•t quan tr·ªçng)
        corners = [(0,0), (0,7), (7,0), (7,7)]
        if (row, col) in corners:
            score += 100
        
        # Tr√°nh v·ªã tr√≠ c·∫°nh g√≥c (nguy hi·ªÉm)
        corner_adjacent = [(0,1), (1,0), (1,1), (0,6), (1,6), (1,7), 
                          (6,0), (6,1), (7,1), (6,6), (6,7), (7,6)]
        if (row, col) in corner_adjacent:
            score -= 50
        
        # ∆Øu ti√™n c·∫°nh
        if row == 0 or row == 7 or col == 0 or col == 7:
            score += 20
        
        # ƒê·∫øm s·ªë qu√¢n l·∫≠t ƒë∆∞·ª£c
        temp_board = [row[:] for row in board.board]
        temp_current = board.current_player
        
        board.make_move(row, col)
        flipped_count = sum(row.count(board.current_player) for row in board.board) - \
                       sum(row.count(board.current_player) for row in temp_board)
        score += flipped_count * 2
        
        # Restore board
        board.board = temp_board
        board.current_player = temp_current
        
        return score
    
    def choose_move(self, board):
        """AI ch·ªçn n∆∞·ªõc ƒëi"""
        valid_moves = board.get_valid_moves()
        
        if not valid_moves:
            return None
        
        if self.difficulty == "easy":
            # Random move
            return random.choice(valid_moves)
        
        elif self.difficulty == "medium":
            # Ch·ªçn n∆∞·ªõc ƒëi t·ªët nh·∫•t d·ª±a tr√™n evaluation
            best_move = None
            best_score = float('-inf')
            
            for row, col in valid_moves:
                score = self.evaluate_move(board, row, col)
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
            
            return best_move
        
        elif self.difficulty == "hard":
            # Minimax ƒë∆°n gi·∫£n (depth 2)
            return self.minimax_move(board, valid_moves)
    
    def minimax_move(self, board, valid_moves):
        """Minimax algorithm ƒë∆°n gi·∫£n"""
        best_move = None
        best_score = float('-inf')
        
        for row, col in valid_moves:
            # Simulate move
            temp_board = [row[:] for row in board.board]
            temp_current = board.current_player
            
            board.make_move(row, col)
            
            # Evaluate opponent's best response
            opponent_moves = board.get_valid_moves()
            if opponent_moves:
                worst_score = float('inf')
                for opp_row, opp_col in opponent_moves:
                    temp_board2 = [row[:] for row in board.board]
                    temp_current2 = board.current_player
                    
                    board.make_move(opp_row, opp_col)
                    score = self.evaluate_position(board)
                    
                    if score < worst_score:
                        worst_score = score
                    
                    # Restore
                    board.board = temp_board2
                    board.current_player = temp_current2
                
                final_score = worst_score
            else:
                final_score = self.evaluate_position(board)
            
            if final_score > best_score:
                best_score = final_score
                best_move = (row, col)
            
            # Restore board
            board.board = temp_board
            board.current_player = temp_current
        
        return best_move
    
    def evaluate_position(self, board):
        """ƒê√°nh gi√° t·ªïng th·ªÉ v·ªã tr√≠"""
        ai_color = -1  # AI l√† White
        player_color = 1  # Player l√† Black
        
        ai_count = sum(row.count(ai_color) for row in board.board)
        player_count = sum(row.count(player_color) for row in board.board)
        
        return ai_count - player_count

def pos_to_str(row, col):
    """Convert position to string (e.g., (2,3) -> 'D3')"""
    return f"{chr(ord('A') + col)}{row + 1}"

def str_to_pos(move_str):
    """Convert string to position (e.g., 'D3' -> (2,3))"""
    if len(move_str) != 2:
        return None
    
    try:
        col = ord(move_str[0].upper()) - ord('A')
        row = int(move_str[1]) - 1
        
        if 0 <= row < 8 and 0 <= col < 8:
            return (row, col)
    except:
        pass
    
    return None

def show_rules():
    """Hi·ªÉn th·ªã lu·∫≠t ch∆°i"""
    print("üìã LU·∫¨T CH∆†I OTHELLO (C·ªù L·∫≠t)")
    print("=" * 50)
    print("üéØ M·ª•c ti√™u: C√≥ nhi·ªÅu qu√¢n c·ªù nh·∫•t khi h·∫øt √¥ tr·ªëng")
    print()
    print("üìú Lu·∫≠t:")
    print("1. M·ªói l∆∞·ª£t ƒë·∫∑t 1 qu√¢n c·ªù v√†o √¥ tr·ªëng")
    print("2. Ph·∫£i bao v√¢y √≠t nh·∫•t 1 qu√¢n ƒë·ªëi ph∆∞∆°ng")
    print("3. T·∫•t c·∫£ qu√¢n b·ªã bao v√¢y s·∫Ω b·ªã l·∫≠t m√†u")
    print("4. N·∫øu kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá th√¨ b·ªè l∆∞·ª£t")
    print("5. Game k·∫øt th√∫c khi kh√¥ng c√≤n √¥ tr·ªëng ho·∫∑c c·∫£ 2 b√™n b·ªè l∆∞·ª£t")
    print()
    print("üí° Chi·∫øn thu·∫≠t:")
    print("‚Ä¢ ∆Øu ti√™n chi·∫øm g√≥c (r·∫•t kh√≥ b·ªã l·∫≠t)")
    print("‚Ä¢ Tr√°nh cho ƒë·ªëi ph∆∞∆°ng chi·∫øm g√≥c")
    print("‚Ä¢ Ki·ªÉm so√°t c·∫°nh b√†n c·ªù")
    print("‚Ä¢ ƒê·ª´ng ch·ªâ t·∫≠p trung v√†o s·ªë l∆∞·ª£ng qu√¢n")
    print()
    input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

def main():
    """Main game function"""
    print("üéÆ OTHELLO (C·ªù L·∫≠t) 8x8")
    print("=" * 40)
    print("1. üë§ Ch∆°i v·ªõi AI")
    print("2. üë• Ch∆°i 2 ng∆∞·ªùi")
    print("3. üìã Xem lu·∫≠t ch∆°i")
    print("4. üö™ Tho√°t")
    print("=" * 40)
    
    choice = input("Ch·ªçn ch·∫ø ƒë·ªô (1-4): ").strip()
    
    if choice == "1":
        play_vs_ai()
    elif choice == "2":
        play_two_players()
    elif choice == "3":
        show_rules()
        main()
    elif choice == "4":
        print("üëã T·∫°m bi·ªát!")
        return
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
        time.sleep(1)
        main()

def play_vs_ai():
    """Ch∆°i v·ªõi AI"""
    print("\nü§ñ Ch·ªçn ƒë·ªô kh√≥ AI:")
    print("1. üòä D·ªÖ (Random)")
    print("2. ü§î Trung b√¨nh (Smart)")
    print("3. üòà Kh√≥ (Minimax)")
    
    difficulty_choice = input("Ch·ªçn ƒë·ªô kh√≥ (1-3): ").strip()
    
    if difficulty_choice == "1":
        difficulty = "easy"
    elif difficulty_choice == "2":
        difficulty = "medium"
    elif difficulty_choice == "3":
        difficulty = "hard"
    else:
        difficulty = "medium"
    
    board = OthelloBoard()
    ai = SimpleAI(difficulty)
    
    print(f"\nüéÆ B·∫Øt ƒë·∫ßu game! B·∫°n l√† ‚óè (Black), AI l√† ‚óã (White)")
    print("üí° Nh·∫≠p n∆∞·ªõc ƒëi theo format: D3, E4, etc.")
    print("üí° Nh·∫≠p 'help' ƒë·ªÉ xem n∆∞·ªõc ƒëi h·ª£p l·ªá, 'quit' ƒë·ªÉ tho√°t")
    
    while True:
        board.print_board()
        
        if board.is_game_over():
            winner = board.get_winner()
            if winner == 1:
                print("üéâ B·∫°n th·∫Øng!")
            elif winner == -1:
                print("ü§ñ AI th·∫Øng!")
            else:
                print("ü§ù H√≤a!")
            break
        
        valid_moves = board.get_valid_moves()
        
        # L∆∞·ª£t ng∆∞·ªùi ch∆°i
        if board.current_player == 1:
            if not valid_moves:
                print("‚è≠Ô∏è  B·∫°n kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá, b·ªè l∆∞·ª£t")
                board.current_player = -board.current_player
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            while True:
                move_input = input("Nh·∫≠p n∆∞·ªõc ƒëi: ").strip().lower()
                
                if move_input == 'quit':
                    print("üëã T·∫°m bi·ªát!")
                    return
                elif move_input == 'help':
                    print(f"N∆∞·ªõc ƒëi h·ª£p l·ªá: {[pos_to_str(r, c) for r, c in valid_moves]}")
                    continue
                
                pos = str_to_pos(move_input)
                if pos and pos in valid_moves:
                    board.make_move(pos[0], pos[1])
                    print(f"‚úÖ B·∫°n ƒë√£ ch∆°i {move_input.upper()}")
                    break
                else:
                    print("‚ùå N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá! Nh·∫≠p 'help' ƒë·ªÉ xem n∆∞·ªõc ƒëi h·ª£p l·ªá")
        
        # L∆∞·ª£t AI
        else:
            if not valid_moves:
                print("‚è≠Ô∏è  AI kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá, b·ªè l∆∞·ª£t")
                board.current_player = -board.current_player
                input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
                continue
            
            print("ü§ñ AI ƒëang suy nghƒ©...")
            time.sleep(1)
            
            ai_move = ai.choose_move(board)
            if ai_move:
                board.make_move(ai_move[0], ai_move[1])
                print(f"ü§ñ AI ch·ªçn: {pos_to_str(ai_move[0], ai_move[1])}")
            
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
    
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")
    main()

def play_two_players():
    """Ch∆°i 2 ng∆∞·ªùi"""
    board = OthelloBoard()
    
    print("\nüë• Ch·∫ø ƒë·ªô 2 ng∆∞·ªùi ch∆°i")
    print("Player 1: ‚óè (Black)")
    print("Player 2: ‚óã (White)")
    print("üí° Nh·∫≠p n∆∞·ªõc ƒëi theo format: D3, E4, etc.")
    
    while True:
        board.print_board()
        
        if board.is_game_over():
            winner = board.get_winner()
            if winner == 1:
                print("üéâ Player 1 (Black) th·∫Øng!")
            elif winner == -1:
                print("üéâ Player 2 (White) th·∫Øng!")
            else:
                print("ü§ù H√≤a!")
            break
        
        valid_moves = board.get_valid_moves()
        
        if not valid_moves:
            player_name = "Player 1 (Black)" if board.current_player == 1 else "Player 2 (White)"
            print(f"‚è≠Ô∏è  {player_name} kh√¥ng c√≥ n∆∞·ªõc ƒëi h·ª£p l·ªá, b·ªè l∆∞·ª£t")
            board.current_player = -board.current_player
            input("Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")
            continue
        
        player_name = "Player 1 (‚óè)" if board.current_player == 1 else "Player 2 (‚óã)"
        print(f"L∆∞·ª£t {player_name}")
        print(f"N∆∞·ªõc ƒëi h·ª£p l·ªá: {[pos_to_str(r, c) for r, c in valid_moves]}")
        
        while True:
            move_input = input("Nh·∫≠p n∆∞·ªõc ƒëi: ").strip().lower()
            
            if move_input == 'quit':
                print("üëã T·∫°m bi·ªát!")
                return
            
            pos = str_to_pos(move_input)
            if pos and pos in valid_moves:
                board.make_move(pos[0], pos[1])
                print(f"‚úÖ {player_name} ƒë√£ ch∆°i {move_input.upper()}")
                break
            else:
                print("‚ùå N∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá!")
    
    input("Nh·∫•n Enter ƒë·ªÉ quay l·∫°i menu...")
    main()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã T·∫°m bi·ªát!")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")
        input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")
